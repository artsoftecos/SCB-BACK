1. Descarga de AWS cLI
Para poder configurar las llaves access_key, secret key, el cual se usa para poder usar servicios como subir archivos a S3
dado que se necesita autenticar.

puede buscar: "download aws cli for windows..":
http://docs.aws.amazon.com/cli/latest/userguide/awscli-install-windows.html
https://www.cyberciti.biz/faq/osx-installing-the-aws-command-line-interface-using-brew/

En mac:
https://www.clickhost.com/how-to-install-aws-cli-on-a-mac-in-3-easy-steps/

Seguir las instrucciones, al final debe quedar con la variable de entorno AWSCLI apuntando a su directorio, o en dado caso
la crea.

1. Publicar aplicación:

Se debe crear una instancia por Elastick beanstalk.
El tipo debe ser "Web Server environment"
Se indica que se va a cargar archivo y se carga el archivo war.
La plataforma Tomcat.

Se puede dejar la configuración por defecto propuesta por Amazon.

2. Acceso a Base de datos:

Dentro del panel de configuración ir a "RDS", allí se crea una instancia de base de datos.
Se ingersa el usuario y contraseña. (el crea la base de datos con nombre ebdb)

Ir a "View RDS Console", aca se realizan configuraciones adicionales:
- Puede ir a Instance Actions (en el menu inferior) y ir a detalles, aca se muestra la información de configuración de la instancia de base de datos.
- Para poder acceder a la bd desde su equipo local dirijase a:
* en el dashboard EC2.
* En el menu de la izquierda dirijase a "Security groups"
* en la tabla seleccione el "Security group for Bd"
* en la pestaña inbound usd puede colocar en los combos:
 ** MyIP : (toma su ip publica y le genera regla)
 ** IP : Puede colocar cualquier IP publica.
 ** Verifique que no halla quitado del inbound el security group de la instrancia elastick 
 (lo necesita para indicar que ese servidor ingresa a la bd, por la aplicacion )
 
3. Subida de paquete war

Ir a elastick y en dashboard subir el war dando click en "update and deploy"

4. SDK de Amazon

Para utilizar varios servicios de Amazon como lo es S3 (Almacenamiento de archivos), Aws expone servicios Rest, pero para consumirlos
se debe tener lo siguiente:
4.1. En pom.xml tener dependencia a aws-java-sdk.
4.2. Configurar las llaves (API_KEY y SECRET) para consumir los servicios.

http://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html#credentials-file-format
(Se va a crear un usuario en AWS, al cual se le generaran esas llaves, eso hace que toda peticiòn este asociada a ese usuario (para desarrollo),
cuando se despliega, ya no se usa el usuario, se debe agregar permisos al rol con el que esta corriendo la instancia de elastick)

- En el dashboard ir a IAM.
- Ir al botòn "Add user"
- Darle un userName y seleccionar "Programmatic Access"
- En permisos: seleccionar "Attach existing policies direclty" y escoger
AdministratorAccess, siguiente y crear usuario.
- El permite descargar un archivo csv, en el cual viene el api_key y el secreto.

4.3. Comenzar a usar el sdk
Al ya tener las llaves, se debe ir a la consola y configurarlas (crea un archivo credentials 
que permite a la api consultar las credenciales y no quemarlas en el codigo).

En eclipse:
https://aws.amazon.com/es/eclipse/

En la consola escribir (sobre el proyecto):
- aws configure  (ingresar las llaves, y colocar en region = us-east-1, en format = json)
(esto crea un archivo : ~/.aws/credentials) ¡No subir este archivo a ningun lado!

** Comandos adicionales:
Crear un bucket (carpeta con permisos propios)
aws s3 mb s3://artsoft_audiofiles

Subir un archivo:
aws s3 cp archivo.extension s3://<Bucket_name>/

Descargar archivo
aws s3 cp s3://<Bucket_name>/archivo.extension ./
 
Eliminar archivo:
aws s3 rm s3://<Bucket_name>/archivo.extension


5. Subir archivos a Aws 
El repositorio de archivos de amazon se llama S3, usand el sdk se pueden almacenar y obtener los archivos.

5.1. Crear un bucket (Repositorio) en S3.
En el dashboard ir a  S3 y crear el bucket ahí.

5.2. Guarde archivos y obtengalos con el sdk.
Se deben crear las funciones para guardar el archivo (PutObject) y para obtenerlo (GetObject),
para eso siempre hay que enviar el nombre del bucket en el cual se desea almacenar, el nombre del archivo y 
el archivo como tipo "File".
Sea para enviarlo o igualmente para obtenerlo.

5.3. La instancia elastick acceda a S3.
http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html
Como el servidor S3 es externo a nuestra instancia, se debe establecer un medio para que conoscan los permisos y pueda cargar o descargar un archivo.
S3 usa un medio de seguridad que se puede encriptar.
El acceso  se hace por roles, que se deben configurar en elastick y en S3.

Se puede acceder desde elastick a S3 por medio de 2 formas:

A. Crear un nuevo rol y reemplazar el existente.
B. Asociar una politica mas al rol que tiene la instancia. 
(https://www.youtube.com/watch?v=C4AyfV3Z3xs)

5.3.1 Crear role:
- Ir a IAM
- Crear un rol en IAM (en el dashboard). (tipo: Aws Service Role -> Amazon EC2)
- Seleccione las politicas (AmazonS3FullAccess)
- De nombre y descripcion
- Para este caso, se creo: Get_AudioFiles.

* Asociar el role con la instancia:
- Ir a EC2.
- Ir a instances (menu izquierda)
- Ir al botón Actions -> Instance settings -> Attach/Replace IAM Role
- Cambiar el rol.

5.3.2 Agregar permiso al rol de elastick.
- Se debe mirar cual es el rol que esta usando elastick, para ello ir en el dashboard a elastick y en configure
ir a Instances y ver el nombre del rol campo "Instance profile" 
- Ir a IAM
- Ir a roles.
- Dar click sobre el rol encontrado, ir a agregar la política
- Ir en las pestañas a Permissions -> Attach policy -> AmazonS3FullAccess

5.3.3 Permisos desde el bucket al rol.
Lo que se a hecho fue indicar que el rol que usa elastick, tiene full acceso a S3, pero desde el bucket tambien se debe establecer 
que usuarios, roles u otro IAM puede accederlo. 

- Ir a S3 y dar click sobre el bucket.
- Ir a la pestaña "Permissions" y dar click al boton "Bucket policy"
Aca se configurara que el rol XXX tendra acceso de ciertas acciones XXXX al recurso XXXX, para este caso se hara:
Configura el rol de elastick [arn:aws:iam::370472337765:role/Get_AudioFiles] 
que tendra accionnes a todo S3 [s3:*], aunque se puede por acciones especificas, y el recurso este bucket
[arn:aws:s3:::artsoft_audiofiles/*]


Ejemplo:
{
    "Version": "2012-10-17",
    "Id": "Policy1498969572760",
    "Statement": [
        {
            "Sid": "Stmt1498969569928",
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::370472337765:role/Get_AudioFiles"
            },
            "Action": "s3:*",
            "Resource": [
                "arn:aws:s3:::artsoft_audiofiles",
                "arn:aws:s3:::artsoft_audiofiles/*"
            ]
        }
    ]
}

6. Acceder a la instancia por SSH
Para acceder a la instancia elastick, se debe tener una llave publica para hacer cifrado asimetrico:

- Ir a EC2 y escoger "Key pairs", generar la llave.
- Ir a elastick -> configuration -> instances
- Cambiar el campo "EC2 Key Pair" y seleccionar el keypar que se acabo de crear.
- Descargar Putty.
- Abrir Putty Gen y cargar la llave descargada.
- Dar click al boton "save private key" y deje el mismo nombre de la llave que descargo. (esta queda con extension pk)
- Abrir Putty y seleccionar:
*En Session: Host : (este valor se obtiene de aws, ir a EC2 -> running instances -> click derecho
y dar click en connect (esto abre una modal.. ir a ejemplo y tomar la parte que dice user@resto_url))
*En connection -> SSH -> Auth (Browse a la private key generada).
*En connection -> Data -> Auto-Login name : Colocar el user name (en este caso es el del Host, el que esta antes del "@")
- Click en Open.

7. Configurar el acceso por programacion con las credenciales:
Para poder subir los documentos a s3, se debe autenticar y utilizar los servicios.
Esto se hace llendo a la consola, usuarios de IAM y ver los token de seguridad, aca lo explican:
http://docs.aws.amazon.com/es_es/cli/latest/userguide/cli-chap-getting-started.html

Aca indican como obtener o configurar las credenciales obtenidas:
http://docs.aws.amazon.com/es_es/sdk-for-java/v1/developer-guide/credentials.html


7. Configurar maquina creada por Launch instance:

Seguir:
https://www.digitalocean.com/community/tutorials/how-to-install-apache-tomcat-8-on-ubuntu-16-04

7.1. En el paso "Step 3: Install Tomcat"
	descargar tomcat: 
	http://tomcat.apache.org/download-90.cgi?Preferred=http%3A%2F%2Fapache.uniminuto.edu%2F#9.0.0.M26
	tomar el link del tar.gz y descomprimirlo
http://apache.uniminuto.edu/tomcat/tomcat-9/v9.0.0.M26/bin/apache-tomcat-9.0.0.M26.tar.gz
	En consola escribir: wget http://apache.uniminuto.edu/tomcat/tomcat-9/v9.0.0.M26/bin/apache-tomcat-9.0.0.M26.tar.gz

7.2. Para terminar cada edicion "Ctrl + x", "y" y enter.

7.3. Instalar git 
apt-get install git
apt install maven

7.4. Configurar tomcat 
Para que pueda desplegar war de gran tamaño.

* In conf\server.xml:

<Connector port="80" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443"
                maxPostSize="67589953" />
				
* In webapps\manager\WEB-INF\web.xml:

<multipart-config>
  <!-- 52MB max -->
  <max-file-size>52428800</max-file-size>
  <max-request-size>52428800</max-request-size>
  <file-size-threshold>0</file-size-threshold>
</multipart-config>

7.5. Accesos del security group por http:
Ir a "vpc", en la parte izquierda ir a "security group" y ahí se puede configurar 
el acceso inbound y outbound de el acceso a la maquina EC2.

Configurar:
HTTP 8080 0.0.0.0/0

7.6. Descargar el proyecto git clone

sudo su
cd /home
git clone https://github.com/artsoftecos/SCB-BACK.git
cd SCB-BACK
git checkout development
git pull
mvn clean install
cp -avr /home/SCB-BACK/target/SCB-Back-1.war /opt/tomcat/webapps
cd /opt/tomcat/webapps
mv SCB-Back-1.war SCB-Back.war

Reset the target:
rm -R target
git fetch --all
git reset --hard origin/<branch_name> = git reset --hard origin/master


Para remover:
rm -R SCB-Back-1
rm -R SCB-Back.war

7.7 Desplegar aplicacion
Ir a la direccion ip publica de la maquina y abrir en el navegador:
http://54.198.54.100:8080

7.8 Errores en despliegue
Si la aplicacion no se logra desplegar, se puede ir a los logs en tomcat y revisarla,

cd /opt/tomcat/logs 
sudo nano catalina.out

Problemas comunes:
la configuracion de la bd.

8. Conectar mysql.

9. Conectar oracle:
https://www.mkyong.com/spring-boot/spring-boot-spring-data-jpa-oracle-example/


10. Configurar https en instancia Amazon:


11. duplicar instancias:
se crea una image(AMI) de la instancia actual con la cual se crean otras instancias.
- ir a EC2 
- seleccionar la instancia -> Actions -> image -> create.
- ir a AMIs y ya ve la imagen creada.

para crear la instancia usando console:
- ir a EC2
- click sobre "Launch instance"
- escoger en la parte derecha en el acordeon: "My AMIs" y escoger su imagen.
- Configurelo: 
** escoja el tipo de instancia q desee.
** en security: 
	* Network: la VPC que siemprehemos manejado. (la por default)
	* Subnet: puede escoger alguna availability zone, o dejarla por defecto (dejarla por defecto)
	* Auto assign IP: deafult.
	* Role: escoja el rol ya existente o dejelo por defecto (escoga Get_AudioFiles).
** Next hasta "Configure security group":
Seleccione existente o que le cree uno. (escoja existente: instance-linux).
** Review and lunch.
** y escoja el key pair (escojer el ya existente).
** para entrar por putty a la maquina use el usuario ubuntu.

(listo con esto ya tiene otra maquina igual a la de la imagen!)

para crear la instancia usando launch configuration para autoescalado:
Siga el tutorial de abajo, solo que para el auto scalling escoja el AMI que creo.
y ya continue con su proceso normal.


11. Para el autoescalado:
http://docs.aws.amazon.com/autoscaling/latest/userguide/GettingStartedTutorial.html

The Auto Scaling resources that you create are tied to the region you specify and are not replicated across regions. 
(los recursos de autoescalado se atan a una unica region y no se replican entre regiones).
Los data centers estan en diferentes ubicaciones fisicas. Las regiones estan ampliamente dipersadas por ubicaciones
geograficas. Cada region contiene multiples ubicaciones distintas, llamadas "availability zones"(zonas de disponibilidad), 
las cuales son gestionadas para estar aisladas de fallas en otras zonas de disponibilidad y provean  bvarato y baja latencia en conectividad a otras zonas de disponibilidad en la misma region.

http://docs.aws.amazon.com/general/latest/gr/rande.html#as_region
Cada servicio, como lo es crear una instancia o crear una cola, puede estar replicada en regiones distintas por diferentes endpoints.
Si en South America = https://ff en US East = https://aa

Hay 2 formas:
a. crear el launch configuration como template, indicando que el mismo cree las instancias (puede crear instancia desde 0 o a partir de imagen) y en el auto escalling group se indica las maquinas.
b. crear el launch cnfiguration segun un tipo de instancia y en autoescalling group se le asocian las instancias 
que se quieren asociar de las que ya se tienen creadas. (a las instancias se le da action -> add auto scalling group).

Se crean 2 archivos:
- launch configuration -> template que usa para crear la maquina.
- auto escalling group -> las instancias que va a crear y con que criterio lo crea. (las crea nuevas o se asocian)

11.1 Crear la configuracion del autoescalado
ir al dashboard de EC2.
11.1.1 ir a la opcion auto scalling => create auto scaling group => launch configuration.
11.1.2 escoja Amazon machine image (AMIs) 64 bit o la que desee (ejemplo: ubuntu)
11.1.4 esacoja el tipode instancia (t2.micro) -> next configure details.
11.1.5 si se tiene una vpc asignela, si no el crea una, esto es para:
Es una subred publica en cada "zona disponibilidad" en la región.
Name = scb-autoscalling-conf
IAM role= escoger si ya tiene uno configurado. (en este caso Get_AudioFiles).
Advanced details=
en IP Address Type= escoger "Assign a public IP address to every instance" .

click sobre "Skip to review"
11.1.6 En el "review" de click a "Security groups" y escoger uno existente o crear uno.
(en este caso se escoge "instance-linux").

click sobre "Create launch configuration"

11.1.7 En "Key pair", la ventana emergente,
escoja "existing key pair".


11.2 Crear el grupo de autoescalado
Son el grupo de las instancias EC2, aca se asocia la configuracion que se quiere para las 
instancias y el numero de instancias a crear y debe contener siempre, ademas de la "zona de disponibilidad"
donde sera lanzada.

11.2.1
Group name= dar un nombre (ejemplo: autoescalado-instancias)
Group size= dar el numero de instancias a crear, eje: 2.
Network= se selecciona VPC, porque es de Amazon (seleccione por defecto)
asi mismo se deben seleccionar subnets. (se escoje a y d (ultima letra)).

Cick sobre: "next -> configure scaling policies".

http://docs.aws.amazon.com/es_es/autoscaling/latest/userguide/as-dg.pdf#as-scaling-simple-step
(escalado dinamico)
11.2.2 escoja la opcion:
" Use scaling policies to adjust the capacity of this group"
escoja:
scale between "1" and "2" instances. sera el minimo y maximo de instancias.

Name= el nombre (ejemplo: Escalado Amzon 1 a 2 instancias)
Metric type: hay 4, se escoje cpu. (las otras son, por request al ELB, entrada de red y salida de red).
target value: escriba 80. (indicva que cuando supere el 80% se activara esta regla de auto escalado, creando la otra instancia).
instances need: 120 (este es el tiempo en segundos que se da para el inicio de la instancia, asi mismo para la terminacion de la instancia).

click sobre "configure notification"

11.2.3 crear notificacion

seleccionese o creese en "create topic".
y coloque el email donde quiere ser notificado.

click sobre "close".

11.3 verificar el autoescalado.
ir a en EC2 dashboard en la parte izquierda a "Auto Scaling group"

aca se observa el grupo de auto escalado.
 
11.4 borrar:
Ir al dashboard de EC2 y escojer auto scalling.

Se puede eliminar:
- el auto scaling group. (este contiene el numerode instancias para crecer.)
- o la configuracion del templatede autoescalado. (este contiene el template que se usa para escalar en cada instancia).

Borrar el scaling group:
bajo auto scalling group -> action -> delete.

Borrar launch configuration:
bajo launch configuration -> action -> delete.


11.5 Para probar el auto escalado:
instale stress:
sudo yum install stress (CENTOS, RHEL, AND FEDORA LINUX) o apt-get install stress (ubuntu)

para usarlo:
use el comando:
stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 300s

para mirar cuanta cpu se esta usando:
top

12. Crear ELB (Elastic load balancer)
Existen 2 tipos: 
- Application Load Balancers: http://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html
- Classic Load Balancers: http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/introduction.html
El balanceador de carga clásico es ideal para balancear el tráfico de forma sencilla en varias instancias de EC2, mientras que el balanceador de carga de aplicaciones es ideal para microservicios o arquitecturas basadas en contenedores en las que debe enrutarse el tráfico a varios servicios o balancear la carga en numerosos puertos de la misma instancia de EC2.

12.1 Crear un certificado auto firmado:
descargar open ssl: https://www.openssl.org/
para windows: https://sourceforge.net/projects/openssl/

https://github.com/Crystalnix/omaha-server/wiki/SSL-Certificate-for-Elastic-Load-Balancing
http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https-ssl.html

CORRA OPEN SSL Y GENERE EL CERTIFDICADO COMO ADMINISTRADOR (ROOT)

A. saber version:
openssl version

B. Crear private key
You need to create an RSA private key to create your certificate signing request (CSR). To create your private key, use the openssl genrsa command:
openssl genrsa 2048 > SCB_SSL_Artsoft.pem
(lo anterior crea el archivo SCB_SSL_Artsoft.pem)

C. Crear CSR (el que se envia a CA para que lo firmen)
(se puede presentar este problema: "Unable to load config info from /usr/local/ssl/openssl.cnf" o que no lo encuentra)
Busque la ruta donde esta el openssl.exe y buscar el archivo openssl.cnf
set OPENSSL_CONF=E:\OpenSSL\bin\openssl.cnf

A CSR is a file you send to a certificate authority (CA) to apply for a digital server certificate. To create a CSR, use the openssl req command:
openssl req -new -key SCB_SSL_Artsoft.pem -out csr.pem

Pide los siguientes datos:
 cuntry: CO
 Province: Bogota
 Locacity: Bogota
 Organization: Artsoft
 Unit Name: Artsoft
 common name: Artsoft
 email: artsoftecos@gmail.com
 clave: artsoft
 optional company name: artsoft

You can submit the signing request to a third party for signing, or sign it yourself for development and testing. 
Self-signed certificates can also be used for backend HTTPS between a load balancer and EC2 instances.
(nosotros mismos vamos a certificarlo)

To sign the certificate, use the openssl x509 command. The following example uses the private key from the previous step (SCB_SSL_Artsoft.pem) and the signing request (csr.pem) to create a public certificate named scb_sslpublic_artsoft.crt that is valid for 365 days :

openssl x509 -req -days 365 -in csr.pem -signkey SCB_SSL_Artsoft.pem -out scb_sslpublic_artsoft.crt

(si sale error como: "unable to write 'random state'", debe correrlo como administrador la consola).

To use the certificate with the Windows Server platform, you must convert it to a PFX format. Use the following command to create a PFX certificate from the private key and public certificate files:

openssl pkcs12 -export -out artsoft.com.pfx -inkey SCB_SSL_Artsoft.pem -in scb_sslpublic_artsoft.crt

12.2 Cargar el certificado en el ELB.
http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https-ssl-upload.html

teniendo instalado was cli y configurado con las llaves del servidor, escribir en consola:
(ojo: cambiar:
- name: ssl-elb
- la llave privada: terminada en pem
- la llave publica: terminada en crt
- el arn, lo mapeo de nuestro beanstalk)

comando:
aws iam upload-server-certificate --server-certificate-name ssl-elb --certificate-body file://E:/llaves/scb_sslpublic_artsoft.crt --private-key file://E:/llaves/SCB_SSL_Artsoft.pem

Esto es lo que responde aws en consola:
{
    "ServerCertificateMetadata": {
        "ServerCertificateId": "ASCAJKMEJNUDISQ7WIQNY",
        "ServerCertificateName": "ssl-elb",
        "Expiration": "2018-08-27T03:47:57Z",
        "Path": "/",
        "Arn": "arn:aws:iam::370472337765:server-certificate/ssl-elb",
        "UploadDate": "2017-08-27T04:16:02.194Z"
    }
}

12.3 Para nuestro caso se creara un balanceador clásico:

- ir a EC2 y en la parte izquierda seleccionar "Load balancers" y dar click sobre "Create load balancer"
- escoger classic load balancer. (next)
** name = scb-back-balanceador
** Create ELB inside: escoja el vpc por defecto.
** En la tabla agregue la configuracion a que apuntarle:
(es una tabla donde las 2 primeras columnas son el protocolo con el cual recibe el ELB la peticion, las otras 2 
son para indicar el protocolo con el que recibe la instancia. (en nuestro caso la instancia recibe en 8080)).
	* Http 80 Para la instancia: si se configuro tls ahi, apuntar a https 443, sino http 8080.
	* Https 443 Para la instancia: si se configuro tls ahi, apuntar a https 443, sino http 8080.
- En el security group, permita que cree una nueva configuracion (para que esa quede solo aociada a los elb).
Name= scb-elb-security
Description: todos los ELB de SCB 
click (next)
- estando en "Configure security settings" escoger la opcion:
"Choose an existing certificate from AWS Identity and Access Management (IAM)"
(en certficate: (se debe mostrar en un combobox los certificados cargados, en nuestro caso el certificado subido en el paso anterior: ssl-elb))
- en la parte de abajo en "Select a cipher", deje por defecto la suite que recomienda AWS.
click en (next)
-estando en "Configure Health check":
	* ping protocol: HTTP (las instancias seran http, el unico https sera el ELB)
	* ping port: 8080
	* Ping Path: /SCB-Back/
(el resto de configuracion por defecto).
click (nxt)
- estando en add EC2 insances:
Agregue las instancias que considere.
- review y create.


En EC2 vaya a load balancing y en description tome el DNS, para nuestro caso es:
https://scb-back-balanceador-820761814.us-east-1.elb.amazonaws.com/SCB-Back/


12. Agregar un ELB al grupo de autoescalado.
http://docs.aws.amazon.com/autoscaling/latest/userguide/attach-load-balancer-asg.html

- Ir a auto escalling en EC2.
- en description del auto scalling -> click al boton "Edit "
- En la opcion Load Balancers: seleccione el balanceador de carga creado.
- save.
(debe esperar un rato para que el autoscalling y el elb se asocien)

12.2 las instancias solo sean accedidas por el elb
http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-groups.html#elb-classic-security-groups

en el security group de las instancias, indique:
Custom tcp
8080
Custom
sg-2c4d215c (el security group del elb), llendo a Load balancing en description buscar "Security group".

lo que se tenia era:
Custom tcp
8080
Custom
0.0.0.0/0

Custom tcp rule
TCP
8080
Custom
sg-6456eb15



8. links:

Los temas que les mostré con los links soporte de información son estos:
 
1.    Que es AWS

https://aws.amazon.com/es/what-is-aws/
 
2.    Cuales son los servicios que ofrece

https://aws.amazon.com/es/products/?nc2=h_ql_ny_livestream_blu
 
3.    Como me registro? (free J  pay L)

https://aws.amazon.com/es/free/
https://aws.amazon.com/es/free/#legal  (especificación de la capa gratuita)
 
4.    Como se administra AWS

http://docs.aws.amazon.com/awsconsolehelpdocs/latest/gsg/getting-started.html
 
(cuando se registren, pueden acceder a la consola de admin: https://console.aws.amazon.com )
 
5.    Arquitectura despliegue:

https://aws.amazon.com/es/pricing/services/
 
-       EC2: Servidor o instancia o máquina.
·         Crear la instancia y propia configuración. ( buscar EC2)  (IAAS)
·         Decirle a AWS que maquina queremos y que la configure como la necesitamos : ( buscar Elastic Beanstalk) (PAAS)
-       RDBS: Base de datos. (buscar rds)
-       ELB: Balanceador de carga. (Estando dentro del dashboard EC2, en la parte izquierda buscar Load Balancing).
-       S3: Almacenamiento de archivos. (buscar s3)
6.    SDK:
https://aws.amazon.com/es/net/?nc2=h_l2_d
 
Ejemplo de subir archivo a aws:
http://docs.aws.amazon.com/AmazonS3/latest/dev/UploadObjSingleOpJava.html
 
7.     Configuración de alarmas.
http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/gs_monitor_estimated_charges_with_cloudwatch.html
https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#  (buscar cloudWatch).
 
La configuración de los accesos por puertos, protocolos que les mostre de la base de datos (aplica para EC2 tambn):
https://console.aws.amazon.com/vpc/home?region=us-east-1#securityGroups:
 


-----------------------
en linux testeo:
Display amount of free and used memory

free -m

Display swap usage summary

swapon -s

Display user-process resource limits

ulimit -a